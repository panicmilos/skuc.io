paketic skuc.io;

use informUser;
use dispatch;
use most common imports;
use changeStatus;


rule "High temperature"
  when
    TemperatureTooHigh has not occured
    def $any = getAnyContextIfActive()
    def $max_temperature = C[$any][max_temperature]
    def $curr_temperature
      - vece od $max_temperature
  then
    removeValue($curr_temperature);
    dispatch(DeleteTemperatureTooLowByTemperatureTooHigh);
    dispatch(DeleteTemperatureBackToNormalByTemperatureTooHigh);
    dispatch(TemperatureTooHigh);
    print("High temperature");
end;

rule "Change status TemperatureTooHigh"
  when
    TemperatureTooHigh has occured
  then
    print("Change status TemperatureTooHigh");
    changeStatus("temperature", "TemperatureTooHigh");
end;

rule "Remove TemperatureTooHigh"
  priority 100
  when
    def $deleteEvent = DeleteTemperatureTooHighByTemperatureTooLow or DeleteTemperatureTooHighByTemperatureBackToNormal have occured
    def $temperatureEvent = TemperatureTooHigh has occured
  then
      print("Remove TemperatureTooHigh");
    removeEvent($deleteEvent);
    removeEvent($temperatureEvent);
end;

rule "Remove TemperatureTooHigh Cleanups"
  when
    def $deleteEvent = DeleteTemperatureTooHighByTemperatureTooLow or DeleteTemperatureTooHighByTemperatureBackToNormal have occured
  then
    print("Remove TemperatureTooHigh Cleanups");
    removeEvent($deleteEvent);
end;



rule "High CO2"
  when
    CO2TooHigh has not occured
    def $any = getAnyContextIfActive()
    def $max_co2 = C[$any][max_co2]
    def $curr_co2
      - vece od $max_co2
  then
    removeValue($curr_co2);
    dispatch(DeleteCO2BackToNormalByCO2TooHigh);
    dispatch(CO2TooHigh);
    print("High CO2");
end;

rule "Remove CO2TooHigh"
  priority 100
  when
    def $deleteEvent = DeleteCO2TooHighByCO2BackToNormal has occured
    def $co2Event = CO2TooHigh has occured
  then
    print("Remove CO2TooHigh");
    removeEvent($deleteEvent);
    removeEvent($co2Event);
end;

rule "Remove CO2TooHigh Cleanups"
  when
    def $deleteEvent = DeleteCO2TooHighByCO2BackToNormal has occured
  then
    print("Remove CO2TooHigh Cleanups");
    removeEvent($deleteEvent);
end;

rule "CO2 Back To Normal"
  when
    CO2BackToNormal has not occured
    def $any = getAnyContextIfActive()
    def $max_co2 = C[$any][max_co2]
    def $curr_co2
      - manje ili jednako sa $max_co2
  then
    print("CO2 Back To Normal");
    removeValue($curr_co2);
    dispatch(DeleteCO2TooHighByCO2BackToNormal);
    dispatch(CO2BackToNormal);
end;

rule "Remove CO2BackToNormal"
  priority 100
  when
    def $deleteEvent = DeleteCO2BackToNormalByCO2TooHigh has occured
    def $co2Event = CO2BackToNormal has occured
  then
    print("Remove CO2BackToNormal");
    removeEvent($deleteEvent);
    removeEvent($co2Event);
end;

rule "Remove CO2BackToNormal Cleanups"
  when
    def $deleteEvent = DeleteCO2BackToNormalByCO2TooHigh has occured
  then
    print("Remove CO2BackToNormal Cleanups");
    removeEvent($deleteEvent);
end;

rule "Remove Curr Co2"
  priority -100
  when
    def $curr_co2
  then
    removeValue($curr_co2);
end;



rule "Low humidity"
  when
    HumidTooLow has not occured
    def $any = getAnyContextIfActive()
    def $min_humidity = C[$any][min_humidity]
    def $curr_humidity
      - manje od $min_humidity
  then
    removeValue($curr_humidity);
    dispatch(DeleteHumidBackToNormalByHumidTooLow);
    dispatch(HumidTooLow);
    print("Low humidity");
end;

rule "Remove HumidTooLow"
  priority 100
  when
    def $deleteEvent = DeleteHumidTooLowByHumidBackToNormal has occured
    def $humidEvent = HumidTooLow has occured
  then
    print("Remove HumidTooLow");
    removeEvent($deleteEvent);
    removeEvent($humidEvent);
end;

rule "Remove HumidTooLow Cleanups"
  when
    def $deleteEvent = DeleteHumidTooLowByHumidBackToNormal has occured
  then
    print("Remove HumidTooLow Cleanups");
    removeEvent($deleteEvent);
end;

rule "Humidity back to normal"
  when
    HumidBackToNormal has not occured
    def $any = getAnyContextIfActive()
    def $min_humidity = C[$any][min_humidity]
    def $curr_humidity
      - vece ili jednako sa $min_humidity
  then
    print("Humidity back to normal");
    removeValue($curr_humidity);
    dispatch(DeleteHumidTooLowByHumidBackToNormal);
    dispatch(HumidBackToNormal);
end;

rule "Remove HumidBackToNormal"
  priority 100
  when
    def $deleteEvent = DeleteHumidBackToNormalByHumidTooLow has occured
    def $humidEvent = HumidBackToNormal has occured
  then
    print("Remove HumidBackToNormal");
    removeEvent($deleteEvent);
    removeEvent($humidEvent);
end;

rule "Remove HumidBackToNormal Cleanups"
  when
    def $deleteEvent = DeleteHumidBackToNormalByHumidTooLow has occured
  then
    print("Remove HumidBackToNormal Cleanups");
    removeEvent($deleteEvent);
end;

rule "Remove Curr Humidity"
  priority -100
  when
    def $curr_humidity
  then
    removeValue($curr_humidity);
end;



rule "Potential fire"
  when
    TemperatureTooHigh has occured
    CO2TooHigh has occured
    HumidTooLow has occured
    PotentialFire has not occured
  then
    print("Potential fire");
    dispatch(PotentialFire);
    informUser()
      with "about": "There is a potential fire in your object."
    ===>
end;

rule "Remove potential fire based on Temperature"
  when
    TemperatureTooLow or TemperatureBackToNormal have occured
    PotentialFire has occured
    FireIsFinished has not occured
  then
    print("Remove potential fire based on Temperature");
    dispatch(FireIsFinished);
end;

rule "Remove potential fire based on CO2"
  when
    CO2BackToNormal has occured
    PotentialFire has occured
    FireIsFinished has not occured
  then
    print("Remove potential fire based on CO2");
    dispatch(FireIsFinished);
end;

rule "Remove potential fire based on Humid"
  when
    HumidBackToNormal has occured
    PotentialFire has occured
    FireIsFinished has not occured
  then
    print("Remove potential fire based on Humid");
    dispatch(FireIsFinished);
end;

rule "Fire is Finished And Remove Potential Fire"
  when
    FireIsFinished has occured
    def $pfEvent = PotentialFire has occured
  then
    print("Fire is Finished And Remove Potential Fire");
    removeEvent($pfEvent);
end;

rule "Fire is Finished And Remove ActivateSprinklers"
  when
    FireIsFinished has occured
    def $asEvent = ActivateSprinklers has occured
  then
    print("Fire is Finished And Remove ActivateSprinklers");
    removeEvent($asEvent);
end;

rule "Fire is Finished And Deactivate Sprinklers"
  when
    FireIsFinished has occured
    are SprinklersActive()
  then
    print("Fire is Finished And Deactivate Sprinklers");
    dispatch(DeactivateSprinklers);
end;

rule "Remove FireIsFinished"
  priority -100
  when
    def $fireEvent = FireIsFinished has occured
  then
    print("Remove FireIsFinished");
    removeEvent($fireEvent);
end;



rule "Close windows"
  when
    PotentialFire has occured
    are WindowsOpen()
  then
    print("Close windows");
    dispatch(CloseWindows);
end;

rule "Turn off AC"
  when
    PotentialFire has occured
    is ACOn()
  then
    print("AC turned off");
    dispatch(TurnOffAC);
end;



rule "Activate sprinklers"
  when
    PotentialFire has occured
    aren't SprinklersActive()
  then
    print("Sprinklers activated");
    dispatch(ActivateSprinklers);
end;

rule "Change status ActivateSprinklers"
  when
    ActivateSprinklers has occured
  then
    print("Change status ActivateSprinklers");
    changeStatus("sprinkler", "SprinklersOn");
end;

rule "Change status DeactivateSprinklers"
  when
    DeactivateSprinklers has occured
  then
    print("Change status DeactivateSprinklers");
    changeStatus("sprinkler", "SprinklersOff");
end;

rule "Remove DeactivateSprinklers"
  priority -100
  when
    def $deactivateEvent = DeactivateSprinklers has occured
  then
    print("Remove DeactivateSprinklers");
    removeEvent($deactivateEvent);
end;

rule "Turn off electric devices"
  when
    ActivateSprinklers has occured
    is AnyElectricDeviceOn()
  then
    print("Turn off electric devices");
    dispatch(TurnOffWashingMachine);
    dispatch(TurnOffAC);
    dispatch(TurnOffHeating);
    dispatch(TurnOffBoiler);
end;



rule "Notify fire station"
  when
    ActivateSprinklers lasts more than 1min
  then
    print("Fire station notified");
end;